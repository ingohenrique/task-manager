name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_taskmanager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      rabbitmq:
        image: rabbitmq:3.12
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
        ports:
          - 5672:5672

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: pip install uv

      - name: Install dependencies
        run: |
          uv pip install --system -e .
          uv pip install --system -e ".[dev]"

      - name: Run tests
        run: pytest --cov=app --cov-report=term-missing
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_taskmanager
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV and linting tools
        run: |
          pip install uv
          uv pip install --system black ruff mypy

      - name: Check code formatting with Black
        run: black --check --diff .

      - name: Lint and check imports with Ruff
        run: |
          ruff check app tests --diff
          ruff format app tests --check --diff

      - name: Type check with mypy
        run: mypy app --ignore-missing-imports

  security:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV and security tools
        run: |
          pip install uv
          uv pip install --system bandit safety

      - name: Run security checks with bandit
        run: bandit -r app/

      - name: Check dependencies for security vulnerabilities
        run: safety check

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, lint, security]
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/task-manager-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/task-manager-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
